{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TRAIN TICKET MACHINE API","text":"<p>Hello hiring managers, developers, and everyone interested in exploring my project related to my application for ABAX!</p> <p>On this page, you will find complete technical documentation detailing the project specifications, test reports, various dependencies, ideas, decisions made, and the challenges I encountered.</p> <p>If you have any questions, please feel free to contact me directly\u2014I will be happy to address any queries!</p> <p>Contact: Marjanowiak@gmail.com</p> <p>Happy reading!</p>"},{"location":"API%20Layer/","title":"API Layer","text":""},{"location":"API%20Layer/#primary-responsibility","title":"Primary Responsibility","text":"<ul> <li>Expose RESTful endpoints.</li> </ul>"},{"location":"API%20Layer/#key-component","title":"Key Component","text":"<ul> <li><code>StationsController.cs</code>  The endpoint GET /api/stations/search accepts the prefix parameter from the query string, validates it using the InputValidator, and calls the search logic in StationSearchService.</li> </ul>"},{"location":"Application%20Layer/","title":"Application Layer","text":""},{"location":"Application%20Layer/#primary-responsibility","title":"Primary Responsibility","text":"<ul> <li>Implements the search logic and data update mechanisms.</li> </ul>"},{"location":"Application%20Layer/#key-modules","title":"Key Modules","text":"<ul> <li>Trie Structure  Implemented in <code>StationTrie.cs</code> </li> <li>TrieNode  enabling fast searching of stations based on a prefix. </li> <li>DTO  <code>StationDTO.cs</code> defines a data transfer object containing two lists: Stations and NextCharacters </li> <li>Services  <code>StationSearchService.cs</code>:  Initializes the trie using data from the repository, cleans station names using NameCleaner.CleanName, performs the search by prefix, and returns the result as a DTO.  <code>StationUpdateDatabaseService.cs</code>:  A background service (inheriting from BackgroundService) that periodically (every 12 hours) fetches new data, updates the repository, and refreshes the trie structure, handling exceptions and logging events.</li> </ul>"},{"location":"Building/","title":"Building &amp; Configuration","text":""},{"location":"Building/#compilation","title":"Compilation","text":""},{"location":"Building/#build","title":"build","text":"<ul> <li>The project is built using <code>dotnet build</code> and RUN with <code>dotnet run</code>.</li> </ul>"},{"location":"Building/#tests","title":"tests","text":"<ul> <li>Unit and integration tests can be executed using dotnet test. Tests are divided among the API, Application, Domain, and Infrastructure test projects, as well as TestHelpers</li> </ul> <p>Personally using Visual Studio 2022 which allowed me to do combination of tests (which is starts right after building process) and build by using one from Rebuild or Build option</p>"},{"location":"Building/#environment","title":"Environment","text":"<ul> <li>The development environment is configured via the launchSettings.json file, which specifies ports (HTTP: 5000, HTTPS: 5001) and launch settings (e.g., automatic Swagger launch).</li> </ul>"},{"location":"Domain%20Layer/","title":"Domain Layer","text":""},{"location":"Domain%20Layer/#primary-responsibility","title":"Primary Responsibility","text":"<ul> <li>Define domain models and contracts (interfaces) used by other layers.</li> </ul>"},{"location":"Domain%20Layer/#key-components","title":"Key Components","text":"<ul> <li><code>StationModel.cs</code> represents a station with properties Code and Name, and includes an <code>IsValid()</code>. </li> </ul>"},{"location":"Domain%20Layer/#interfaces","title":"Interfaces","text":"<ul> <li> <p><code>IStationRepository.cs</code>  Defines methods for retrieving all stations and updating the database.</p> </li> <li> <p><code>IStationDataSource.cs</code>  Defines an asynchronous method to fetch station data</p> </li> </ul>"},{"location":"Implementation%20Details/","title":"Implementation Details","text":""},{"location":"Implementation%20Details/#api","title":"API","text":"<ul> <li><code>StationsController.cs</code><ul> <li>The endpoint GET /api/stations/search accepts the prefix query parameter.</li> <li>Input validation is performed using InputValidator.</li> <li>In case of invalid input, a 400 Bad Request is returned.</li> <li>The search result is returned as a StationDto.</li> </ul> </li> </ul>"},{"location":"Implementation%20Details/#application-logic","title":"Application Logic","text":"<ul> <li>Trie Structure (<code>StationTrie.cs</code>, <code>TrieNode.cs</code>) <ul> <li>The Insert method adds a station to the trie.</li> <li>The Search method returns both a list of words matching the prefix and a list of \"next characters\". </li> </ul> </li> <li>DTO (<code>StationDTO.cs</code>)<ul> <li>Contains two lists: Stations and NextCharacters. </li> </ul> </li> <li>Services<ul> <li><code>StationSearchService.cs</code></li> <li>Initializes the trie using data from the repository (via the <code>IStationRepository</code> interface), cleans station names using <code>NameCleaner</code>, and performs the prefix-based search </li> </ul> </li> <li><code>StationUpdateDatabaseService.cs</code><ul> <li>A background service that periodically fetches new data from an external source, updates the repository, and refreshes the trie, handling exceptions and logging events.</li> </ul> </li> </ul>"},{"location":"Implementation%20Details/#domain-and-infrastructure-layers","title":"Domain and Infrastructure Layers","text":"<ul> <li>Domain<ul> <li><code>StationModel.cs</code> represents a station.</li> <li>Interfaces IStationRepository and IStationDataSource define the contracts for data access. </li> </ul> </li> <li>Infrastructure<ul> <li><code>JsonUrlDataSource.cs</code> fetches and maps JSON data to <code>StationModel</code> objects.</li> <li><code>StationRepository.cs</code> implements in-memory storage and update mechanisms for station data.</li> </ul> </li> </ul>"},{"location":"Implementation%20Details/#helper-modules","title":"Helper Modules","text":"<ul> <li><code>InputValidator</code>, <code>LoggerConfigurationHelper</code>, <code>NameCleaner</code><ul> <li>These modules provide input sanitization, log configuration, and data cleaning functions.</li> </ul> </li> </ul>"},{"location":"Infrastructure%20Layer/","title":"Infrastructure Layer","text":""},{"location":"Infrastructure%20Layer/#primary-responsibility","title":"Primary Responsibility","text":"<ul> <li>Data access, repository implementation, and mapping external data to domain models.</li> </ul>"},{"location":"Infrastructure%20Layer/#key-components","title":"Key Components","text":"<ul> <li>Data Access  <code>JsonUrlDataSource.cs</code>  Implements IStationDataSource \u2013 fetches data from an external class being interpretation of required data source (JSON in this case), deserializes it, and maps it to StationModel objects. </li> <li>Transfer Data to object  DTO <code>StationJsonDto.cs</code> for mapping JSON data (with properties stationCode and stationName). </li> <li>Repository  <code>StationRepository.cs</code> Implements IStationRepository by storing station data in memory and enabling updates with thread safety.</li> </ul>"},{"location":"Introdution/","title":"Project Objective","text":"<p>The application implements an API for ticket machines that allows users to search for train stations based on a typed prefix. </p>"},{"location":"Introdution/#the-search-result-includes","title":"The search result includes","text":"<ul> <li>A list of matching stations</li> <li>Set of \"next characters\" (including spaces) \u2013 that is, the characters that immediately follow the entered prefix. This information can be used in further operations (e.g., determining routes and ticket prices).</li> </ul>"},{"location":"Introdution/#context","title":"Context","text":"<p>The project was developed as part of the recruitment process for ABAX. API Task included fast and efficient search implementation based on also other requirements that can be founded here</p>"},{"location":"Modules/","title":"Helper","text":""},{"location":"Modules/#tests","title":"tests","text":"<p><code>FakeHttpMessageHandler.cs</code>  A fake HTTP message handler that simulates HTTP responses, used for testing data fetching without actual network calls.</p>"},{"location":"Modules/#src","title":"src","text":"<p><code>InputValidator.cs</code>  Validates and sanitizes input, removing potential XSS threats and checking for SQL Injection risks.  <code>LoggerConfigurationHelper.cs</code>  Configures the log folder path based on the operating system  <code>NameCleaner.cs</code>  Cleans station names (e.g., removing unwanted characters and converting to uppercase) </p>"},{"location":"Performance/","title":"Performance Tests","text":""},{"location":"Performance/#overview","title":"Overview","text":"<ul> <li>The performance tests were executed using Visual Studio\u2019s Diagnostics Tools. The results are stored in the \"docs/performance/PerformanceTest.diagsession\" file.</li> <li>These tests simulate high load conditions to evaluate system responsiveness, throughput, and resource utilization under stress.</li> </ul>"},{"location":"Performance/#api-performance","title":"API Performance","text":"<p>Response Time  - Under stress conditions, the API maintained an average response time of approximately 150 ms, with peak response times not exceeding 250 ms.  Throughput    - The system successfully handled up to 500 concurrent requests without significant degradation in performance.  Resource Utilization    - Memory usage remained stable at around 200 MB during high load, and CPU usage peaked at approximately 75%.  Error Rate    - No significant increase in errors was observed during the test, indicating robust handling of heavy traffic.</p>"},{"location":"Performance/#application-and-infrastructure-performance","title":"Application and Infrastructure Performance","text":"<p>Trie Structure Efficiency:    - The efficient implementation of the trie structure ensures fast search operations even with a large dataset.  Data Update Performance:    - Background data updates and trie refresh operations are executed within acceptable time limits, minimizing the impact on live API performance.</p>"},{"location":"Performance/#observations-and-recommendations","title":"Observations and Recommendations","text":"<ul> <li>The test results confirm that the system meets the required performance benchmarks.</li> <li>Minor optimizations (e.g., fine-tuning concurrency settings or enhancing caching mechanisms) could further improve performance.</li> <li>It is recommended to periodically re-run these performance tests to monitor system behavior as the dataset grows or as new features are added.</li> </ul>"},{"location":"Security/","title":"Security Testing Requirements","text":""},{"location":"Security/#api-and-helper-module-security-tests","title":"API and Helper Module Security Tests","text":"<p><code>StationControllerTests.cs</code> (TrainTicketMachine.API.Tests)  - Verifies that the GET /api/stations/search endpoint properly validates incoming requests: - Returns a 400 Bad Request when the input contains potential XSS or SQL injection patterns.</p> <p><code>InputValidatorTests.cs</code>  - Confirms that input sanitization methods effectively remove script tags, event handler attributes, and the \"javascript:\" protocol to protect against XSS and SQL Injection attacks.  <code>LoggerConfigurationTests.cs</code>  - Ensures that the GetAndCreateLogFolder method securely handles invalid folder names and creates the proper log directory on various operating systems, preventing unauthorized access to log files.</p> <p></p>"},{"location":"Security/#application-layer-security-tests","title":"Application Layer Security Tests","text":"<p><code>StationSearchServiceTests.cs</code> (TrainTicketMachine.Application.Tests)  - Validates that station names are cleaned and sanitized before processing, ensuring that malicious input is not stored or processed by the search functionality.  <code>StationUpdateDatabaseServiceTests.cs</code>  - Checks that the background update service securely handles exceptions during data updates, ensuring that sensitive information is not exposed.</p> <p></p>"},{"location":"Security/#domain-and-infrastructure-security-tests","title":"Domain and Infrastructure Security Tests","text":"<p><code>StationModelTests.cs</code> (TrainTicketMachine.Domain.Tests)  - Verifies that the StationModel enforces proper validation of its data, ensuring only valid station entries are processed.  <code>JsonUrlDataSourceTests.cs</code> (TrainTicketMachine.Infrastructure.Tests) - Ensures that the data source correctly throws exceptions for malformed JSON, preventing invalid data from compromising the system.  <code>StationRepositoryTests.cs</code>  - Confirms that the repository safely handles empty or invalid data collections without exposing security vulnerabilities.</p>"},{"location":"Solution%20Structure/","title":"Solution Structure","text":"<p>The solution file <code>TrainTicketMachine.sln</code> defines the project hierarchy and build configurations.</p>"},{"location":"Solution%20Structure/#the-main-solution-contains-the-following-projects","title":"The main solution contains the following projects","text":"<ul> <li><code>Helpers</code></li> <li><code>TrainTicketMachine.API</code> \u2013 API layer.</li> <li><code>TrainTicketMachine.Application</code> \u2013 Business logic and search implementation.</li> <li><code>TrainTicketMachine.Domain</code> \u2013 Domain models and interfaces.</li> <li><code>TrainTicketMachine.Infrastructure</code> \u2013 Data access and repositories.</li> </ul>"},{"location":"Solution%20Structure/#test-projects","title":"Test projects","text":"<ul> <li><code>TestHelpers</code></li> <li><code>TrainTicketMachine.API.Tests</code></li> <li><code>TrainTicketMachine.Application.Tests</code></li> <li><code>TrainTicketMachine.Domain.Tests</code></li> <li><code>TrainTicketMachine.Infrastructure.Tests</code></li> </ul>"},{"location":"Summary/","title":"Summary and Future Improvements","text":""},{"location":"Summary/#current-project-state","title":"Current Project State","text":"<p>The project meets the recruitment requirements \u2014 the station search implementation is based on a trie structure, input validation is in place, data updates occur in the background, and comprehensive tests cover all layers of the system.</p>"},{"location":"Summary/#possible-extensions","title":"Possible Extensions","text":"<ul> <li>Expand the API with additional functionalities (e.g., station management, pricing, route information).</li> <li>Improve the search algorithm (e.g., further optimize the trie structure, add indexing).</li> <li>Extend the test suite with more detailed integration tests.</li> </ul>"},{"location":"System%20Architecture/","title":"System Architecture","text":"<p>The Train Ticket Machine API is built using a layered architecture to ensure a clear separation of concerns, ease of maintenance, scalability, and testability. The system is organized into several primary layers.  </p> <p>References between the layers</p> <p> </p> <p>Solution folder structure</p> <p></p>"},{"location":"Testing/","title":"Testing Overview","text":"<p>The tests are organized by application layer and are contained within their respective test projects.</p>"},{"location":"Testing/#api-and-helper-tests","title":"API and Helper Tests","text":"<ul> <li><code>StationControllerTests.cs</code> (TrainTicketMachine.API.Tests)**</li> <li>Endpoint Tested: GET /api/stations/search</li> <li> <p>Test Cases:</p> <ul> <li>When no prefix is provided, it returns all stations (e.g., \"DARTFORD\", \"LIVERPOOL\").</li> <li>When a non-matching prefix is provided, it returns an empty result.</li> </ul> </li> <li> <p>Helper Module Tests</p> </li> <li><code>InputValidatorTests.cs</code><ul> <li>Validates that sanitization methods remove script tags, on-event attributes, and the \"javascript:\" protocol.</li> <li>Checks for protection against SQL injection risks.</li> </ul> </li> <li>LoggerConfigurationTests.cs<ul> <li>Ensures that <code>GetAndCreateLogFolder</code> returns the correct log path.</li> <li>Confirms that the method creates the necessary directory on different operating systems.</li> </ul> </li> </ul>"},{"location":"Testing/#application-layer-tests","title":"Application Layer Tests","text":"<ul> <li><code>StationSearchServiceTests.cs</code> (TrainTicketMachine.Application.Tests)</li> <li> <p>Scenarios Tested:</p> <ul> <li>Returns matching stations and the corresponding \u201cnext characters\u201d for a given prefix (e.g., for \"DART\", returns \"DARTFORD\" with \"F\" and \"DARTON\" with \"O\").</li> <li>Ensures that station names are cleaned correctly by removing unwanted characters.</li> <li>Handles scenarios when the repository is empty or the prefix does not match any station.</li> <li>Tests <code>TryUpdateTrieAsync</code> for:</li> <li>Uninitialized trie.</li> <li>New data that is identical to current data.</li> <li>New data that differs from the current data.</li> </ul> </li> <li> <p><code>StationUpdateDatabaseServiceTests.cs</code></p> </li> <li>Verifies that the background service updates both the repository and trie when new data is successfully fetched.</li> <li>Ensures that no update is performed if an exception occurs during data retrieval.</li> </ul>"},{"location":"Testing/#domain-layer-tests","title":"Domain Layer Tests","text":"<ul> <li><code>StationModelTests.cs</code> (TrainTicketMachine.Domain.Tests)**</li> <li>Tests the station model's constructor and the <code>IsValid()</code> method.</li> <li>Confirms proper initialization and validation of the station properties.</li> </ul>"},{"location":"Testing/#infrastructure-layer-tests","title":"Infrastructure Layer Tests","text":"<ul> <li>JsonUrlDataSourceTests.cs (TrainTicketMachine.Infrastructure.Tests)</li> <li> <p>Validates that <code>GetStationsAsync</code> throws a JSON exception when provided with invalid JSON data. [97]</p> </li> <li> <p><code>StationRepositoryTests.cs</code></p> </li> <li>Ensures that the repository returns an empty collection when the data source provides an empty list.</li> </ul>"}]}